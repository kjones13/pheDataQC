df3$Intensity_Value[df3$Intensity_Value == "3 to 10"] <- 2
df3$Intensity_Value[df3$Intensity_Value == "11 to 100"] <- 3
df3$Intensity_Value[df3$Intensity_Value == "101 to 1,000"] <- 4
df3$Intensity_Value[df3$Intensity_Value == "1,001 to 10,000"] <- 5
df3$Intensity_Value[df3$Intensity_Value == "More than 10,000"] <- 6
df3$Intensity_Value[df3$Intensity_Value == "Less than 5%"] <- 7
df3$Intensity_Value[df3$Intensity_Value == "5-24%"] <- 8
df3$Intensity_Value[df3$Intensity_Value == "Less than 25%"] <- 8
df3$Intensity_Value[df3$Intensity_Value == "25-49%"] <- 9
df3$Intensity_Value[df3$Intensity_Value == "50-74%"] <- 10
df3$Intensity_Value[df3$Intensity_Value == "75-94%"] <- 11
df3$Intensity_Value[df3$Intensity_Value == "95% or more"] <- 12
df3$Intensity_Value <- as.integer(df3$Intensity_Value)
df3 <- filter(df3, !Intensity_Value=='NA')
names(df3)
dates <- vector()
indIDs <- vector()
pheNames <- vector()
agrees <- vector()
numObs <- vector()
funcType <- vector()
minMaxDistance <- vector()
dates <- vector()
indIDs <- vector()
pheNames <- vector()
agrees <- vector()
numObs <- vector()
funcType <- vector()
Distance <- vector()
for (i in 1:length(unique(df3$temp))){
sub <- df3[which(df3$Observation_Date==strsplit(df3$temp[i],'_')[[1]][1] &
df3$Individual_ID==strsplit(df3$temp[i],'_')[[1]][2] &
df3$Phenophase_Name==strsplit(df3$temp[i],'_')[[1]][3]),]
#If there is more than one row in the subset, calculate agree (0=no, 1=yes)
# calculate intensity value distance between disagreement
if(nrow(sub)>1){
agree <- ifelse(length(unique(sub$Intensity_Value))==1, 1, 0)
numObs <- c(numObs,nrow(sub))
diff <- max(sub$Intensity_Value)-min(sub$Intensity_Value)
dates <- c(dates,sub$Observation_Date[1])
indIDs <- c(indIDs,sub$Individual_ID[1])
pheNames <- c(pheNames,sub$Phenophase_Name[1])
funcType <- c(funcType, sub$Species_Functional_Type [1])
agrees <- c(agrees,agree)
minMaxDistance <- c(Distance, diff)
}
}
outDist <- data.frame(date=dates, individualID=indIDs, phenophaseName= pheNames,
functionalType=funcType, agree=agrees,
numberObservers=numObs, minMaxDistance=minMaxDistance)
outDist <- rem_dups(outDist, names(outDist))
outDist$dist <- 'na'
outDist$dist <- ifelse((outDist$minMaxDistance==0 | outDist$minMaxDistance==1),
outDist$dist <- 1,outDist$dist <- 0)
propConcurDist <- (sum(outDist$dist))/(nrow(outDist))
propConcurDist
propConcurDist <- (sum(outDist$dist))/(nrow(outDist))
propConcurDist
dates <- vector()
indIDs <- vector()
pheNames <- vector()
agrees <- vector()
numObs <- vector()
funcType <- vector()
Distance <- vector()
#Subset data by unique values of temp
for (i in 1:length(unique(df3$temp))){
sub <- df3[which(df3$Observation_Date==strsplit(df3$temp[i],'_')[[1]][1] &
df3$Individual_ID==strsplit(df3$temp[i],'_')[[1]][2] &
df3$Phenophase_Name==strsplit(df3$temp[i],'_')[[1]][3]),]
#If there is more than one row in the subset, calculate agree (0=no, 1=yes)
# calculate intensity value distance between disagreement
if(nrow(sub)>1){
agree <- ifelse(length(unique(sub$Intensity_Value))==1, 1, 0)
numObs <- c(numObs,nrow(sub))
diff <- max(sub$Intensity_Value)-min(sub$Intensity_Value)
dates <- c(dates,sub$Observation_Date[1])
indIDs <- c(indIDs,sub$Individual_ID[1])
pheNames <- c(pheNames,sub$Phenophase_Name[1])
funcType <- c(funcType, sub$Species_Functional_Type [1])
agrees <- c(agrees,agree)
minMaxDistance <- c(Distance, diff)
}
}
library(gtools)
library(plyr)
library(dplyr)
site <- "MOAB"
plots <- c('044', '045', '046')
setwd(paste("~/SharePoint/Veg. Characterization - Documents/Data/Output CSVs"))
tax <- read.csv(paste('div_', site, '/',"div_taxon_", site, '.csv', sep=''), stringsAsFactors = F)
cov <- read.csv(paste('div_', site, '/',"div_cover_", site,'.csv', sep=''), stringsAsFactors=F)
plot1 <- read.csv(paste('div_', site, '/',"div_", site, '_', plots[1],".csv", sep=''), skip=6, header=T)
plot2 <- read.csv(paste('div_', site, '/',"div_", site, '_', plots[2],".csv", sep=''), skip=6, header=T)
plot3 <- read.csv(paste('div_', site, '/',"div_", site, '_', plots[3],".csv", sep=''), skip=6, header=T)
plot1$plotID <- paste(site,"_",plots[1])
plot2$plotID <- paste(site,"_",plots[2])
plot3$plotID <- paste(site,"_",plots[3])
unique(df3$dist)
outDist <- data.frame(date=dates, individualID=indIDs, phenophaseName= pheNames,
functionalType=funcType, agree=agrees,
numberObservers=numObs, minMaxDistance=minMaxDistance)
outDist <- rem_dups(outDist, names(outDist))
outDist$dist <- 'na'
outDist$dist <- ifelse((outDist$minMaxDistance==0 | outDist$minMaxDistance==1),
outDist$dist <- 1,outDist$dist <- 0)
unique(df3$dist)
View(outDist)
webUI <- rbind(plot1, plot2, plot3)
webUI$siteID <- site
webUI$boutNumber <- 'Characterization'
#separate out moss cover
moss <- filter(webUI, Cover.Type=='moss')
#remove abiotic and non-vascular
webUI <- filter(webUI, !Plant.or.Other=='Other Cover')
#rename fields to match
webUI$date <- ''
webUI <- webUI %>%
select(siteID, plotID, boutNumber, Measured.By, Recorded.By, date, Sub.Plot, Species.Code,
Taxon.Remarks,ID.Qualifier, Morpho.ID, Morpho.Remarks, Percent.Cover, Remarks)%>%
rename(measuredBy=Measured.By, recordedBy=Recorded.By, subplot=Sub.Plot,
taxonID=Species.Code, taxonIDRemarks=Taxon.Remarks,
identificationQualifier=ID.Qualifier, morphospeciesID=Morpho.ID,
morphoSpeciesRemarks=Morpho.Remarks, percentCover=Percent.Cover, remarks=Remarks)
#remove unused variable
tax <- select(tax, -height)
#merge all vascular data to one df
allTax <- rbind(tax, webUI)
#merge all moss data
cov$siteID <- site
cov <- select(cov, -variableRemarks)
moss <- moss %>%
select(siteID, plotID, boutNumber, Measured.By, Recorded.By, Sub.Plot,
Percent.Cover,  Remarks)%>%
rename(measuredBy=Measured.By, recordedBy=Recorded.By, subplot=Sub.Plot,
moss=Percent.Cover, remarks=Remarks)
allMoss <- if(nrow(moss)>0){
smartbind(moss, cov)
}else{
cov
}
allMoss$taxonID <- "moss"
allMoss <- rename(allMoss, percentCover=moss)
final <- smartbind(allTax, allMoss)
final <- smartbind(tax, cov)
write.csv(tax,
file= paste('Transfered to Contractor/',
'div_',site,'_merged.csv', sep=''))
write.csv(tax,
file= paste('div_', site, '/',
'div_',site,'_merged.csv', sep=''))
dates <- vector()
indIDs <- vector()
pheNames <- vector()
agrees <- vector()
numObs <- vector()
funcType <- vector()
minMaxDistance <- vector()
#Subset data by unique values of temp
for (i in 1:length(unique(df3$temp))){
sub <- df3[which(df3$Observation_Date==strsplit(df3$temp[i],'_')[[1]][1] &
df3$Individual_ID==strsplit(df3$temp[i],'_')[[1]][2] &
df3$Phenophase_Name==strsplit(df3$temp[i],'_')[[1]][3]),]
#If there is more than one row in the subset, calculate agree (0=no, 1=yes)
# calculate intensity value distance between disagreement
if(nrow(sub)>1){
agree <- ifelse(length(unique(sub$Intensity_Value))==1, 1, 0)
numObs <- c(numObs,nrow(sub))
diff <- max(sub$Intensity_Value)-min(sub$Intensity_Value)
dates <- c(dates,sub$Observation_Date[1])
indIDs <- c(indIDs,sub$Individual_ID[1])
pheNames <- c(pheNames,sub$Phenophase_Name[1])
funcType <- c(funcType, sub$Species_Functional_Type [1])
agrees <- c(agrees,agree)
minMaxDistance <- c(minMaxDistance, diff)
}
}
outDist <- data.frame(date=dates, individualID=indIDs, phenophaseName= pheNames,
functionalType=funcType, agree=agrees,
numberObservers=numObs, minMaxDistance=minMaxDistance)
unique(outDist$minMaxDistance)
View(outDist)
outDist <- rem_dups(outDist, names(outDist))
outDist$dist <- 'na'
outDist$dist <- ifelse((outDist$minMaxDistance==0 | outDist$minMaxDistance==1),
outDist$dist <- 1,outDist$dist <- 0)
propConcurDist <- (sum(outDist$dist))/(nrow(outDist))
propConcurDist
propSummaryTypeDist <- outDist %>%
group_by(functionalType) %>%
summarise(sumDist=sum(dist), instances=length(dist), propAgree=sumDist/instances)
propSummaryTypeDist
propSummaryPheDist <- outDist %>%
group_by(phenophaseName) %>%
summarise(sumDist=sum(dist), instances=length(dist), propAgree=sumDist/instances)
propSummaryPheDist
median(propSummaryTypeDist)
median(propSummaryTypeDist$propAgree)
median(propSummaryPheDist$propAgree)
propSummaryTypeDist <- select(propSummaryTypeDist, -functionalType=='Cactus', -functionalType=='Forb')
propSummaryTypeDist <- select(propSummaryTypeDist, !functionalType=='Cactus', !functionalType=='Forb')
median(propSummaryTypeDist$propAgree)
rm(webUI)
rm(tax)
rm(cov)
rm(plot1)
rm(plot2)
rm(plot3)
propConcur <- (sum(out$agree))/(nrow(out))
propConcur
propSummaryPhe <- out %>%
group_by(phenophaseName) %>%
summarise(sumAgree=sum(agree), instances=length(agree), propAgree=sumAgree/instances)
propSummaryPhe
propSummaryType <- out %>%
group_by(functionalType) %>%
summarise(sumAgree=sum(agree), instances=length(agree), propAgree=sumAgree/instances)
propSummaryType
unique(outDist$minMaxDistance)
propConcurDist <- (sum(outDist$dist))/(nrow(outDist))
propConcurDist
propSummaryTypeDist <- outDist %>%
group_by(functionalType) %>%
summarise(sumDist=sum(dist), instances=length(dist), propAgree=sumDist/instances)
propSummaryTypeDist
propSummaryPheDist <- outDist %>%
group_by(phenophaseName) %>%
summarise(sumDist=sum(dist), instances=length(dist), propAgree=sumDist/instances)
propSummaryPheDist
propSummaryType
propSummaryPhe <- out %>%
group_by(phenophaseName) %>%
summarise(sumAgree=sum(agree), instances=length(agree), propAgree=sumAgree/instances)
propSummaryPhe
outDist$intensityType <- 'NA'
names(outDist)
outDist$intensityType[outDist$phenophaseName == "Breaking leaf buds"] <- 'count'
unique(outDist$intensityType)
outDist$intensityType <- 'NA'
outDist$intensityType[outDist$phenophaseName == "Breaking leaf buds"] <- 'count'
outDist$intensityType[outDist$phenophaseName == "Emerging needles"] <- 'count'
outDist$intensityType[outDist$phenophaseName == "Young leaves"] <- 'count'
outDist$intensityType[outDist$phenophaseName == "Young needles"] <- 'count'
outDist$intensityType[outDist$phenophaseName == "Colored leaves"] <- 'percentage'
outDist$intensityType[outDist$phenophaseName == "Increasing leaf size"] <- 'percentage'
outDist$intensityType[outDist$phenophaseName == "Leaves"] <- 'percentage'
outDist$intensityType[outDist$phenophaseName == "Open flowers"] <- 'percentage'
unique(outDist$intensityType)
names(outDist)
propSummaryIntensityType <- outDist %>%
group_by(intensityType) %>%
summarise(sumAgree=sum(agree), instances=length(agree), propAgree=sumAgree/instances)
propSummaryIntensityType
propSummaryIntensityType <- outDist %>%
group_by(functionalType, intensityType) %>%
summarise(sumAgree=sum(agree), instances=length(agree), propAgree=sumAgree/instances)
propSummaryIntensityType
propSummaryIntensityType.Table <- xtable(propSummaryIntensityType)
print.xtable(propSummaryIntensityType.Table, type="html", file="propSummaryIntensityType.html")
setwd("~/R/phenology/NPNdata_20150715")
propSummaryIntensityType.Table <- xtable(propSummaryIntensityType)
print.xtable(propSummaryIntensityType.Table, type="html", file="propSummaryIntensityType.html")
propSummaryPhe
propSummaryPhe <- out %>%
group_by(phenophaseName) %>%
summarise(sumAgree=sum(agree), sumDist=sum(dist),  instances=length(agree), propAgree=sumAgree/instances, propDist=sumDist/instances)
propSummaryPhe2
propSummaryPhe <- outDist %>%
group_by(phenophaseName) %>%
summarise(sumAgree=sum(agree), sumDist=sum(dist),  instances=length(agree), propAgree=sumAgree/instances, propDist=sumDist/instances)
propSummaryPhe2
propSummaryPhe2 <- outDist %>%
group_by(phenophaseName) %>%
summarise(sumAgree=sum(agree), sumDist=sum(dist),  instances=length(agree), propAgree=sumAgree/instances, propDist=sumDist/instances)
propSummaryPhe2
propSummaryPhe2 <- outDist %>%
group_by(intensityType) %>%
summarise(sumAgree=sum(agree), sumDist=sum(dist),  instances=length(agree), propAgree=sumAgree/instances, propDist=sumDist/instances)
propSummaryPhe2
propSummaryPhe2 <- outDist %>%
group_by(intensityType, functionalType) %>%
summarise(sumAgree=sum(agree), sumDist=sum(dist),  instances=length(agree), propAgree=sumAgree/instances, propDist=sumDist/instances)
propSummaryPhe2
propSummaryPhe2 <- outDist %>%
group_by(functionalType) %>%
summarise(sumAgree=sum(agree), sumDist=sum(dist),  instances=length(agree), propAgree=sumAgree/instances, propDist=sumDist/instances)
propSummaryPhe2
propSummaryType2 <- outDist %>%
group_by(functionalType) %>%
summarise(sumAgree=sum(agree), sumDist=sum(dist),  instances=length(agree), propAgree=sumAgree/instances, propDist=sumDist/instances)
propSummaryType2
propSummaryType2 <- filter(propSummaryType2, -functionalType=='Cactus', -functionalType=='Forb')
propSummaryType2 <- filter(propSummaryType2, !functionalType=='Cactus', !functionalType=='Forb')
propSummaryType2
propSummaryType2 <- outDist %>%
group_by(functionalType) %>%
summarise(sumAgree=sum(agree), sumDist=sum(dist),  instances=length(agree), propAgree=sumAgree/instances, propDist=sumDist/instances)
propSummaryType2
propSummaryType2 <- filter(propSummaryType2, !functionalType=="Cactus")
propSummaryType2 <- filter(propSummaryType2, !functionalType=="Forb")
propSummaryType2
propSummaryTypeInt <- outDist %>%
group_by(functionalType) %>%
summarise(sumAgree=sum(agree), sumDist=sum(dist),  instances=length(agree), propAgree=sumAgree/instances, propDist=sumDist/instances)
propSummaryTypeInt
propSummaryTypeInt <- filter(propSummaryType2, !functionalType=="Cactus")
propSummaryTypeInt <- filter(propSummaryType2, !functionalType=="Forb")
propSummaryTypeInt
propSummaryTypeInt <- outDist %>%
group_by(functionalType, intensityType) %>%
summarise(sumAgree=sum(agree), sumDist=sum(dist),  instances=length(agree), propAgree=sumAgree/instances, propDist=sumDist/instances)
propSummaryTypeInt <- filter(propSummaryType2, !functionalType=="Cactus")
propSummaryTypeInt <- filter(propSummaryType2, !functionalType=="Forb")
propSummaryTypeInt
propSummaryTypeInt
propSummaryTypeInt <- outDist %>%
group_by(functionalType, intensityType) %>%
summarise(sumAgree=sum(agree), sumDist=sum(dist),  instances=length(agree),
propAgree=sumAgree/instances, propDist=sumDist/instances)
propSummaryTypeInt
library(gtools)
library(plyr)
library(dplyr)
site <- "MOAB"
plots <- c('044', '045', '046')
setwd(paste("~/SharePoint/Veg. Characterization - Documents/Data/Output CSVs"))
tax <- read.csv(paste('div_', site, '/',"div_taxon_", site, '.csv', sep=''), stringsAsFactors = F)
cov <- read.csv(paste('div_', site, '/',"div_cover_", site,'.csv', sep=''), stringsAsFactors=F)
plot1 <- read.csv(paste('div_', site, '/',"div_", site, '_', plots[1],".csv", sep=''), skip=6, header=T)
plot2 <- read.csv(paste('div_', site, '/',"div_", site, '_', plots[2],".csv", sep=''), skip=6, header=T)
plot3 <- read.csv(paste('div_', site, '/',"div_", site, '_', plots[3],".csv", sep=''), skip=6, header=T)
plot1$plotID <- paste(site,"_",plots[1])
plot2$plotID <- paste(site,"_",plots[2])
plot3$plotID <- paste(site,"_",plots[3])
webUI <- rbind(plot1, plot2, plot3)
webUI$siteID <- site
webUI$boutNumber <- 'Characterization'
moss <- filter(webUI, Cover.Type=='moss')
View(moss)
View(webUI)
unique(webUI$Cover.Type)
moss
webUI$date <- ''
webUI <- webUI %>%
select(siteID, plotID, boutNumber, Measured.By, Recorded.By, date, Sub.Plot, Species.Code,
Taxon.Remarks,ID.Qualifier, Morpho.ID, Morpho.Remarks, Percent.Cover, Remarks)%>%
rename(measuredBy=Measured.By, recordedBy=Recorded.By, subplot=Sub.Plot,
taxonID=Species.Code, taxonIDRemarks=Taxon.Remarks,
identificationQualifier=ID.Qualifier, morphospeciesID=Morpho.ID,
morphoSpeciesRemarks=Morpho.Remarks, percentCover=Percent.Cover, remarks=Remarks)
tax <- select(tax, -height)
allTax <- rbind(tax, webUI)
names(tax)
names(webUI)
allTax <- smartbind(tax, webUI)
cov$siteID <- site
cov <- select(cov, -variableRemarks)
names(cov)
names(moss)
names(allTax)
cov <- cov %>%
select(siteID, plotID, boutNumber, measuredBy, recordedBy, date, subplot, moss) %>%
cov <- cov %>%
select(siteID, plotID, boutNumber, measuredBy, recordedBy, date, subplot, moss)
moss <- moss %>%
select(siteID, plotID, boutNumber, Measured.By, Recorded.By, Sub.Plot,
Percent.Cover,  Remarks)%>%
rename(measuredBy=Measured.By, recordedBy=Recorded.By, subplot=Sub.Plot,
moss=Percent.Cover, remarks=Remarks)
allMoss <- if(nrow(moss)>0){
smartbind(moss, cov)
}else{
cov
}
allMoss$taxonID <- "moss"
allMoss <- if(nrow(moss)>0){
smartbind(moss, cov)
}else{
cov
}
allMoss$taxonID <- "moss"
allMoss <- rename(allMoss, percentCover=moss)
final <- smartbind(allTax, allMoss)
write.csv(tax,
file= paste('Transfered to Contractor/',
'div_',site,'_merged.csv', sep=''))
write.csv(tax,
file= paste('div_', site, '/',
'div_',site,'_merged.csv', sep=''))
write.csv(tax,
file= paste('div_', site, '/',
'div_',site,'_merged.csv', sep=''))
rm(list = ls())
library(plyr)
library(dplyr)
library(atbdLibrary)
library(xtable)
```
```{r readNPNdata}
#set working directory
setwd("~/R/phenology/NPNdata_20150715")
allData <- read.csv('observation_data.csv', na.strings = "",
stringsAsFactors=F)
```
```{r manipulate dataset}
#subset to to phenophase status='yes' (1), and reduce # of fields.
df1 <- filter(allData, Phenophase_Status==1) %>%
select(Observation_Date, ObservedBy_Person_ID, Individual_ID,
USDA_PLANTS_Symbol, Species_Functional_Type, Phenophase_Name,
Phenophase_Status, Intensity_Value, Genus, Species)
#create scientificName field
df1$scientificName <- "na"
df1$scientificName <- paste(df1$Genus, df1$Species, sep=" ")
#remove old dfs
#rm(allData)
```
```{r, reduce nrows to just dupes}
#Set temp column in order to identify records with duplicate values in specific fields
colsToValidate <- c('Individual_ID', 'Observation_Date', 'Phenophase_Name')
#select only those row that have duplicate values
df2<-df1[duplicated (df1[,colsToValidate]) | duplicated (df1[,colsToValidate], fromLast=TRUE),]
# remove duplicates resulting from multiple observations recorded by only one person on a given day
df2 <- rem_dups(df=df2, cols=c(colsToValidate, 'ObservedBy_Person_ID'), qfColName = 'dupByPerson')
# remove phenophases for which no intensity is reported
df2 <- filter(df2, !Phenophase_Name=="Falling leaves", !Phenophase_Name=="Pollen release",
!Phenophase_Name=="Flower heads", !Phenophase_Name=='Flowers',
!Phenophase_Name=='Flowers or flower buds', !Phenophase_Name=='Open pollen cones',
!Phenophase_Name=='Pollen cones', !Intensity_Value==-9999)
df2$temp <- paste(df2$Observation_Date, df2$Individual_ID, df2$Phenophase_Name,
sep='_')
#Set empty vectors to hold the values needed for the new dataframe
dates <- vector()
indIDs <- vector()
pheNames <- vector()
agrees <- vector()
numObs <- vector()
funcType <- vector()
#Subset data by unique values of temp
for (i in 1:length(unique(df2$temp))){
sub <- df2[which(df2$Observation_Date==strsplit(df2$temp[i],'_')[[1]][1] &
df2$Individual_ID==strsplit(df2$temp[i],'_')[[1]][2] &
df2$Phenophase_Name==strsplit(df2$temp[i],'_')[[1]][3]),]
#If there is more than one row in the subset, calculate agree (0=no, 1=yes)
if(nrow(sub)>1){
agree <- ifelse(length(unique(sub$Intensity_Value))==1, 1, 0)
numObs <- c(numObs,nrow(sub))
dates <- c(dates,sub$Observation_Date[1])
indIDs <- c(indIDs,sub$Individual_ID[1])
pheNames <- c(pheNames,sub$Phenophase_Name[1])
funcType <- c(funcType, sub$Species_Functional_Type [1])
agrees <- c(agrees,agree)
}
}
#Create output dataframe
out <- data.frame(date=dates, individualID=indIDs, phenophaseName= pheNames,
functionalType=funcType, agree=agrees,
numberObservers=numObs)
out <- rem_dups(out, names(out))
```
```{r summary}
## overall concurance of phenophase intensity for = 0.8769671
propConcur <- (sum(out$agree))/(nrow(out))
propConcur
install_github("NEONInc/devTOS",
subdir="atbdLibrary",
auth_user="kjones13",
auth_token = "ec6151f7582cbcd1611d78e9f485690fbfa54590")
library(devtools)
install_github("NEONInc/devTOS",
subdir="atbdLibrary",
auth_user="kjones13",
auth_token = "ec6151f7582cbcd1611d78e9f485690fbfa54590")
if (file.exists(
'C:/Users/kjones/Documents/GitHub/devTOS/litter')){
wdir<-'C:/Users/kjones/Documents/GitHub/devTOS/litter'
}
myPathToGraphics <- paste(wdir,'graphics', sep='/')
myPathToData <- paste(wdir,'data', sep='/')
myPathToCIFiles <- paste(myPathToData, 'CI_files', sep='/')
inFieldData <- read.csv(paste(myPathToData, 'ltr_fielddata.csv', sep='/'), stringsAsFactors=FALSE)
#Remove special characters (e.g., extra spaces) from fields with free text (remarks, others)
inFieldData <- rem_specialChars(df = inFieldData, cols=c('remarks'))
##Massdata
inMassData <- read.csv(paste(myPathToData, 'ltr_massdata.csv', sep='/'), stringsAsFactors=FALSE)
#Remove special characters (e.g., extra spaces) from fields with free text (remarks, others)
inMassData <- rem_specialChars(df = inMassData, cols=c('remarks'))
##pertrap
inTrapData <- read.csv(paste(myPathToData, 'ltr_pertrap.csv', sep='/'), stringsAsFactors=FALSE)
#Remove special characters (e.g., extra spaces) from fields with free text (remarks, others)
inTrapData <- rem_specialChars(df = inTra[Data, cols=c('remarks'))
inFieldData <- read.csv(paste(myPathToData, 'ltr_fielddata.csv', sep='/'), stringsAsFactors=FALSE)
if (file.exists(
'C:/Users/kjones/Documents/GitHub/devTOS/litter/ltr_atbd')){
wdir<-'C:/Users/kjones/Documents/GitHub/devTOS/litter/ltr_atbd'
}
myPathToGraphics <- paste(wdir,'graphics', sep='/')
myPathToData <- paste(wdir,'data', sep='/')
myPathToCIFiles <- paste(myPathToData, 'CI_files', sep='/')
inFieldData <- read.csv(paste(myPathToData, 'ltr_fielddata.csv', sep='/'), stringsAsFactors=FALSE)
#Remove special characters (e.g., extra spaces) from fields with free text (remarks, others)
inFieldData <- rem_specialChars(df = inFieldData, cols=c('remarks'))
##Massdata
inMassData <- read.csv(paste(myPathToData, 'ltr_massdata.csv', sep='/'), stringsAsFactors=FALSE)
#Remove special characters (e.g., extra spaces) from fields with free text (remarks, others)
inMassData <- rem_specialChars(df = inMassData, cols=c('remarks'))
##pertrap
inTrapData <- read.csv(paste(myPathToData, 'ltr_pertrap.csv', sep='/'), stringsAsFactors=FALSE)
#Remove special characters (e.g., extra spaces) from fields with free text (remarks, others)
inTrapData <- rem_specialChars(df = inTra[Data, cols=c('remarks'))
inTrapData <- rem_specialChars(df = inTra[Data, cols=c('remarks')
inTrapData <- rem_specialChars(df = inTrapData, cols=c('remarks'))
names(inFieldData)
